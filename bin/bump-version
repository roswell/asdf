#! /usr/bin/env perl

use FindBin;
use Getopt::Long;
our $old;
our $new;
our $new_no_pre_release;
our $usage = 0;

&GetOptions("help"=>\$usage,
            "usage"=>\$usage);

if ($usage) {
  print "$0 [old-version] [new-version]\n";
  print "\tIf only one argument, treat it as the new version argument.\n";
  print "\tIf two arguments treat the first as old version number and second as new.\n";
  print "\n\tBumps the version numbers in all the relevant files.\n";
  exit 0;
}

our $asdf_dir = $FindBin::RealBin . "/../";
our $file = $asdf_dir . "full-version.lisp-expr";

our @transform_ref =
  (
   [ "version.lisp-expr", "\"", "\"",  1],
   [ "full-version.lisp-expr", "\"", "\"",  0],
   [ "uiop/version.lisp", "(defparameter *uiop-version* \"", "\")", 0 ],
   [ "asdf.asd", "  #+asdf3.4 :version #+asdf3.4 \"", "\" ;; to be automatically updated by make bump-version", 0 ],
   [ "asdf.asd", "  #-asdf3.4 :version #-asdf3.4 \"", "\" ;; to be automatically updated by make bump-version", 1 ],
   [ "header.lisp", "This is ASDF ", ": Another System Definition Facility.", 0 ],
   [ "upgrade.lisp", "(asdf-version \"", "\")", 0 ],
   [ "doc/asdf.texinfo", "Manual for Version ", "", 0 ], );

if ($#ARGV == 1) {
  $old = $ARGV[0];
  $new = $ARGV[1];
} elsif ($#ARGV == 0) {
  $new = $ARGV[0];
  $old = read_asdf_version();
} else {
  $old = read_asdf_version();
  $new = bump_asdf_version($old);
}

$new_no_pre_release = $new;
$new_no_pre_release =~ s/-.*//g;

print STDERR "Bumping from $old to $new\n";
transform_files();

sub read_asdf_version {
  open(FILE, $file);
  my $str = <FILE>;
  chomp $str;
  print STDERR "Read version string $str from $file\n";
  close FILE;
  $str =~ s/"//g;
  return $str;
}

sub bump_asdf_version {
  my $oldver = shift;
  my @fields = split/\./, $oldver;
  $fields[$#fields]++;
  return join('.', @fields);
}


sub transform_files {
  foreach my $entryptr (@transform_ref) {
    my @entry = @{$entryptr};
    my $file = $entry[0];
    my $strip_pre_release = $entry[3];
    print STDERR "Modifying file $file\n";
    print STDERR "Prefix is $entry[1], suffix is $entry[2]\n";
    my $regex = "(" . quotemeta($entry[1]) . ")" . "((\\d+\\.)+\\d+(\\-[a-zA-Z0-9_.-]+)?)" . "(" . quotemeta($entry[2]) .")";
    my $filename = $asdf_dir . $file;
    my $data = read_text($filename);
    my $count;
    if ($strip_pre_release) {
        $count = ($data =~ s/$regex/$1$new_no_pre_release$5/g);
    } else {
        $count = ($data =~ s/$regex/$1$new$5/g);
    }
    if ($count == 0) {
      die "Unable to replace $regex with $1$new$5";
    }
    # print STDERR "Writing $data to $filename\n";
    write_text($filename, $data);

  }
}

# can't reliably find File::Slurper, or File::Slurp, so do it
# old school.
sub read_text ($) {
  my $fn = shift;
  local $/ = undef;
  open READFILE, $fn or die "Couldn't open file: $fn";
  binmode READFILE;
  my $string = <READFILE>;
  close READFILE;
  return $string;
}

sub write_text ($$) {
  my $fn = shift;
  my $data = shift;
  open WRITEFILE, "> $fn" or die "Couldn't open $fn for writing.";
  print WRITEFILE $data;
  close WRITEFILE;
  return 1;
}
